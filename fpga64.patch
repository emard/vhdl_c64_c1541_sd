--- rtl_renommes\fpga64_buslogic_roms_mmu.vhd	2008-08-29 17:35:30.000000000 +0200
+++ rtl_dar\fpga64_buslogic_roms_mmu.vhd	2015-07-25 20:49:18.074013800 +0200
@@ -9,19 +9,24 @@
 -- http://www.syntiac.com/fpga64.html
 -- -----------------------------------------------------------------------
 
+-- -----------------------------------------------------------------------
+-- Dar 08/03/2014
+--
+-- Based on mixing both fpga64_buslogic_roms and fpga64_buslogic_nommu
+-- RAM should be external SRAM
+-- Basic, Char and Kernel ROMs are included
+-- Original Kernel replaced by JiffyDos
+-- -----------------------------------------------------------------------
+
 library IEEE;
 USE ieee.std_logic_1164.ALL;
 USE ieee.numeric_std.ALL;
 
--- -----------------------------------------------------------------------
-
-entity fpga64_buslogic_roms is
+entity fpga64_buslogic is
 	port (
-		clk: in std_logic;
-		reset: in std_logic;
-		ena : in std_logic;
-		busCycle: in unsigned(5 downto 0);
-		cpuGetsBus : in std_logic;
+		clk : in std_logic;
+		reset : in std_logic;
+		cpuHasBus : in std_logic;
 
 		ramData: in unsigned(7 downto 0);
 
@@ -30,6 +35,10 @@
 		-- 0 LORAM
 		bankSwitch: in unsigned(2 downto 0);
 
+		-- From cartridge port
+		game : in std_logic;
+		exrom : in std_logic;
+
 		cpuWe: in std_logic;
 		cpuAddr: in unsigned(15 downto 0);
 		cpuData: in unsigned(7 downto 0);
@@ -42,7 +51,6 @@
 		lastVicData : in unsigned(7 downto 0);
 
 		systemWe: out std_logic;
-		pulseWr: out std_logic;
 		systemAddr: out unsigned(15 downto 0);
 		dataToCpu : out unsigned(7 downto 0);
 		dataToVic : out unsigned(7 downto 0);
@@ -52,13 +60,19 @@
 		cs_color : out std_logic;
 		cs_cia1: out std_logic;
 		cs_cia2: out std_logic;
-		cs_ram: out std_logic
+		cs_ram: out std_logic;
+
+		-- To catridge port
+		cs_ioE: out std_logic;
+		cs_ioF: out std_logic;
+		cs_romL : out std_logic;
+		cs_romH : out std_logic
 	);
-end fpga64_buslogic_roms;
+end fpga64_buslogic;
 
 -- -----------------------------------------------------------------------
 
-architecture rtl of fpga64_buslogic_roms is
+architecture rtl of fpga64_buslogic is
 	component fpga64_colorram is
 		port (
 			clk: in std_logic;
@@ -86,25 +100,30 @@
 	signal cs_colorReg : std_logic;
 	signal cs_cia1Reg : std_logic;
 	signal cs_cia2Reg : std_logic;
+	signal cs_ioEReg : std_logic;
+	signal cs_ioFReg : std_logic;
+	signal cs_romLReg : std_logic;
+	signal cs_romHReg : std_logic;
 
 	signal currentAddr: unsigned(15 downto 0);
-	signal cpuHasBus : std_logic; -- Hacky hack
+	
 begin
-	charrom: entity work.c64rom_chargen
+	charrom: entity work.rom_c64_chargen
 		port map (
 			clk => clk,
 			addr => currentAddr(11 downto 0),
 			do => charData
 		);
 
-	basicrom: entity work.c64rom_basic
+	basicrom: entity work.rom_c64_basic
 		port map (
 			clk => clk,
 			addr => cpuAddr(12 downto 0),
 			do => basicData
 		);
 
-	kernelrom: entity work.c64rom_kernal
+--kernelrom: entity work.rom_c64_Jiffy_kernel
+	kernelrom: entity work.rom_c64_kernal
 		port map (
 			clk => clk,
 			addr => cpuAddr(12 downto 0),
@@ -112,19 +131,7 @@
 		);
 	
 	--
-	-- write pulse runs during subCycle xxx10. 
-	generatePulseWe: process(clk, busCycle, cpuWe)
-	begin
-		if rising_edge(clk) then
-			pulseWr <= '0';
--- !!! Need to go into toplevel not buslogic
-			if (busCycle = "00101") and (cpuWe = '1') then
-				-- Pulse WR halfway CPU access
-				pulseWr <= '1';
-			end if;
-		end if;
-	end process;
-	
+	--begin
 	process(ramData, vicData, sidData, colorData, cia1Data, cia2Data, cs_ramReg, cs_vicReg, cs_sidReg, cs_colorReg, cs_cia1Reg, cs_cia2Reg, lastVicData)
 	begin
 		-- If no hardware is addressed the bus is floating.
@@ -137,106 +144,136 @@
 		elsif cs_KernalReg = '1' then	
 			dataToCpu <= kernalData;	
 		elsif cs_ramReg = '1' then
-			dataToCpu <= ramData;
+		    dataToCpu <= ramData;
 		elsif cs_vicReg = '1' then
 			dataToCpu <= vicData;
 		elsif cs_sidReg = '1' then
 			dataToCpu <= sidData;
 		elsif cs_colorReg = '1' then
-			dataToCpu <= "1111" & colorData;
+			dataToCpu(3 downto 0) <= colorData;
 		elsif cs_cia1Reg = '1' then
 			dataToCpu <= cia1Data;
 		elsif cs_cia2Reg = '1' then
 			dataToCpu <= cia2Data;
+		elsif cs_romLReg = '1' then
+			dataToCpu <= ramData;
+		elsif cs_romHReg = '1' then
+			dataToCpu <= ramData;
 		end if;
 	end process;
 
-	-- !!! hacky hack
 	process(clk)
 	begin
 		if rising_edge(clk) then
-			if ena = '1' then
-				cpuHasBus <= cpuGetsBus;
-			end if;
-		end if;
-	end process;
+--			if ena = '1' then
+				currentAddr <= (others => '1'); -- Prevent generation of a latch when neither vic or cpu is using the bus.
 
-	process(clk)
-	begin
-		if rising_edge(clk) then
-			currentAddr <= (others => '1'); -- Prevent generation of a latch when neither vic or cpu is using the bus.
-			systemWe <= '0';
-			vicCharReg <= '0';
-			cs_charReg <= '0';
-			cs_basicReg <= '0';
-			cs_kernalReg <= '0';
-			cs_ramReg <= '0';
-			cs_vicReg <= '0';
-			cs_sidReg <= '0';
-			cs_colorReg <= '0';
-			cs_cia1Reg <= '0';
-			cs_cia2Reg <= '0';
-
-			if (cpuHasBus = '1') then
-				-- The 6502 CPU has the bus.
-				currentAddr <= cpuAddr;
-				case cpuAddr(15 downto 12) is
-				when X"E" | X"F" =>
-					if (cpuWe = '0') and (bankSwitch(1) = '1') then
+				systemWe <= '0';
+				vicCharReg <= '0';
+				cs_charReg <= '0';
+				cs_basicReg <= '0';
+				cs_kernalReg <= '0';
+				cs_ramReg <= '0';
+				cs_vicReg <= '0';
+				cs_sidReg <= '0';
+				cs_colorReg <= '0';
+				cs_cia1Reg <= '0';
+				cs_cia2Reg <= '0';
+				cs_ioEReg <= '0';
+				cs_ioFReg <= '0';
+				cs_romLReg <= '0';
+				cs_romHReg <= '0';
+
+				if (cpuHasBus = '1') then
+					-- The 6502 CPU has the bus.					
+					currentAddr <= cpuAddr;
+					case cpuAddr(15 downto 12) is
+					when X"E" | X"F" =>
+						if (cpuWe = '0') and (bankSwitch(1) = '1') then
 						-- Read kernal
 						cs_kernalReg <= '1';
-					else
+						else
 						-- 64Kbyte RAM layout
-						cs_ramReg <= '1';
-					end if;
-				when X"D" =>
+							cs_ramReg <= '1';
+						end if;
+					when X"D" =>
 					if (bankSwitch(1) = '0') and (bankSwitch(0) = '0') then
 						-- 64Kbyte RAM layout
 						cs_ramReg <= '1';
 					elsif bankSwitch(2) = '1' then
-						case cpuAddr(11 downto 8) is
-							when X"0" | X"1" | X"2" | X"3" =>
-								cs_vicReg <= '1';
-							when X"4" | X"5" | X"6" | X"7" =>
-								cs_sidReg <= '1';
-							when X"8" | X"9" | X"A" | X"B" =>
-								cs_colorReg <= '1';
-							when X"C" =>
-								cs_cia1Reg <= '1';
-							when X"D" =>
-								cs_cia2Reg <= '1';
-							when others =>
-								null;
-						end case;						
-					else
-						-- I/O space turned off. Read from charrom or write to RAM.
-						if cpuWe = '0' then
-							cs_charReg <= '1';
+							case cpuAddr(11 downto 8) is
+								when X"0" | X"1" | X"2" | X"3" =>
+									cs_vicReg <= '1';
+								when X"4" | X"5" | X"6" | X"7" =>
+									cs_sidReg <= '1';
+								when X"8" | X"9" | X"A" | X"B" =>
+									cs_colorReg <= '1';
+								when X"C" =>
+									cs_cia1Reg <= '1';
+								when X"D" =>
+									cs_cia2Reg <= '1';
+								when X"E" =>
+									cs_ioEReg <= '1';
+								when X"F" =>
+									cs_ioFReg <= '1';
+								when others =>
+									null;
+							end case;
 						else
+							-- I/O space turned off. Read from charrom or write to RAM.
+							if cpuWe = '0' then
+							     cs_charReg <= '1';
+						    else
+							     cs_ramReg <= '1';
+							end if;
+						end if;
+					when X"A" | X"B" =>
+						if (cpuWe = '0') and (exrom = '0') and (game = '0') and (bankSwitch(1) = '1') then
+							-- Access cartridge with romH
+							cs_romHReg <= '1';
+						elsif (cpuWe = '0') and (bankSwitch(1) = '1') and (bankSwitch(0) = '1') then
+							-- Access basic rom
+							cs_basicReg <= '1';
+						elsif (exrom = '0') or (game = '1') then
+							-- If not in Ultimax mode access ram
 							cs_ramReg <= '1';
 						end if;
-					end if;
-				when X"A" | X"B" =>
-					if (cpuWe = '0') and (bankSwitch(1) = '1') and (bankSwitch(0) = '1') then
-						cs_basicReg <= '1';
-					else
+					when X"8" | X"9" =>
+						if exrom = '1' and game = '0' then
+							-- Ultimax access with romL
+							cs_romLReg <= '1';
+						elsif (cpuWe = '0')
+						and (bankSwitch(1) = '1')
+						and (bankSwitch(0) = '1')
+						and (exrom = '0') then
+							-- Access cartridge with romL
+							cs_romLReg <= '1';
+						else
+							cs_ramReg <= '1';
+						end if;
+					when X"0" =>
 						cs_ramReg <= '1';
-					end if;
-				when others =>
-					cs_ramReg <= '1';
-				end case;
-
-				systemWe <= cpuWe;
-			else
-				-- The VIC-II has the bus.
-				currentAddr <= vicAddr;
-				if vicAddr(14 downto 12)="001" then
-					vicCharReg <= '1';
+					when others =>
+						-- If not in Ultimax mode access ram
+						if (exrom = '0') or (game = '1') then
+							cs_ramReg <= '1';
+						end if;
+					end case;
+
+					systemWe <= cpuWe;
 				else
-					cs_ramReg <= '1';
+					-- The VIC-II has the bus.
+					currentAddr <= vicAddr;
+
+					if vicAddr(14 downto 12)="001" then
+ 					   vicCharReg <= '1';
+   				else
+	    				cs_ramReg <= '1';
+		    		end if;
 				end if;
 			end if;
-		end if;
+
+--		end if;
 	end process;
 	
 	cs_ram <= cs_ramReg;
@@ -245,16 +282,19 @@
 	cs_color <= cs_colorReg;
 	cs_cia1 <= cs_cia1Reg;
 	cs_cia2 <= cs_cia2Reg;
+	cs_ioE <= cs_ioEReg;
+	cs_ioF <= cs_ioFReg;
+	cs_romL <= cs_romLReg;
+	cs_romH <= cs_romHReg;
 
 	process(ramData, charData, vicCharReg)
 	begin
 		if vicCharReg = '1' then
 			dataToVic <= charData;
 		else
-			dataToVic <= ramData;
+	dataToVic <= ramData;
 		end if;
 	end process;
 
 	systemAddr <= currentAddr;
 end architecture;
-
--- rtl_renommes\fpga64_sid_iec.vhd	2008-07-24 22:37:54.000000000 +0200
+++ rtl_dar\fpga64_sid_iec.vhd	2015-05-13 14:47:38.298898300 +0200
@@ -15,6 +15,14 @@
 -- 4 additional cycles are used to interface with the C-One IEC port.
 -- 
 -- -----------------------------------------------------------------------
+-- Dar 08/03/2014 
+--
+-- Based on fpga64_cone
+-- add external selection for 15KHz(TV)/31KHz(VGA)
+-- add external selection for power on NTSC(60Hz)/PAL(50Hz)
+-- add external conection in/out for IEC signal
+-- add sid entity 
+-- -----------------------------------------------------------------------
 
 library IEEE;
 use IEEE.STD_LOGIC_1164.ALL;
@@ -23,7 +31,7 @@
 
 -- -----------------------------------------------------------------------
 
-entity fpga64_cone is
+entity fpga64_sid_iec is
 	generic (
 		resetCycles: integer := 4095
 	);
@@ -37,13 +45,15 @@
 		kbd_dat: in std_logic;
 
 		-- external memory
-		ramAddr: out unsigned(16 downto 0);
+		ramAddr: out unsigned(15 downto 0);
 		ramData: inout unsigned(7 downto 0);
 
 		ramCE: out std_logic;
 		ramWe: out std_logic;
 
-		-- VGA interface
+		-- VGA/SCART interface
+		tv15Khz_mode : in std_logic;
+		ntscInitMode : in std_logic;
 		hsync: out std_logic;
 		vsync: out std_logic;
 		r : out unsigned(7 downto 0);
@@ -70,13 +80,26 @@
 
 		--Connector to the SID
 		SIDclk: out std_logic;
-		still: out unsigned(15 downto 0)
-	);
-end fpga64_cone;
+		still: out unsigned(15 downto 0);
+		audio_data : out std_logic_vector(17 downto 0);
+
+		-- IEC
+		iec_data_o	: out std_logic;
+		iec_data_i	: in std_logic;
+		iec_clk_o	: out std_logic;
+		iec_clk_i	: in std_logic;
+		iec_atn_o	: out std_logic;
+		iec_atn_i	: in std_logic;
+		
+		disk_num : out std_logic_vector(7 downto 0);
+		dbg_num : out std_logic_vector(2 downto 0)
+
+);
+end fpga64_sid_iec;
 
 -- -----------------------------------------------------------------------
 
-architecture rtl of fpga64_cone is
+architecture rtl of fpga64_sid_iec is
 	-- System state machine
 	type sysCycleDef is (
 		CYCLE_IDLE0, CYCLE_IDLE1, CYCLE_IDLE2, CYCLE_IDLE3,
@@ -122,7 +145,7 @@
 	signal pulseWrIo: std_logic;
 	signal pulseRd: std_logic;
 	signal colorWe : std_logic;
-	signal systemAddr: unsigned(16 downto 0);
+	signal systemAddr: unsigned(15 downto 0);
 	signal ramDataReg : unsigned(7 downto 0);
 
 	signal cs_vic: std_logic;
@@ -141,28 +164,32 @@
 
 	signal bankSwitch: unsigned(2 downto 0);
 
--- CIA signals
-signal enableCia : std_logic;
-signal cia1Do: unsigned(7 downto 0);
-signal cia2Do: unsigned(7 downto 0);
+	-- SID signals
+	signal sid_we : std_logic;
+	signal sid_do : std_logic_vector(7 downto 0);
+
+	-- CIA signals
+	signal enableCia : std_logic;
+	signal cia1Do: unsigned(7 downto 0);
+	signal cia2Do: unsigned(7 downto 0);
 
 -- keyboard
-signal newScanCode: std_logic;
-signal theScanCode: unsigned(7 downto 0);
+	signal newScanCode: std_logic;
+	signal theScanCode: unsigned(7 downto 0);
 
--- I/O
-signal cia1_pai: unsigned(7 downto 0);
-signal cia1_pao: unsigned(7 downto 0);
-signal cia1_pad: unsigned(7 downto 0);
-signal cia1_pbi: unsigned(7 downto 0);
-signal cia1_pbo: unsigned(7 downto 0);
-signal cia1_pbd: unsigned(7 downto 0);
-signal cia2_pai: unsigned(7 downto 0);
-signal cia2_pao: unsigned(7 downto 0);
-signal cia2_pad: unsigned(7 downto 0);
-signal cia2_pbi: unsigned(7 downto 0);
-signal cia2_pbo: unsigned(7 downto 0);
-signal cia2_pbd: unsigned(7 downto 0);
+	-- I/O
+	signal cia1_pai: unsigned(7 downto 0);
+	signal cia1_pao: unsigned(7 downto 0);
+	signal cia1_pad: unsigned(7 downto 0);
+	signal cia1_pbi: unsigned(7 downto 0);
+	signal cia1_pbo: unsigned(7 downto 0);
+	signal cia1_pbd: unsigned(7 downto 0);
+	signal cia2_pai: unsigned(7 downto 0);
+	signal cia2_pao: unsigned(7 downto 0);
+	signal cia2_pad: unsigned(7 downto 0);
+	signal cia2_pbi: unsigned(7 downto 0);
+	signal cia2_pbo: unsigned(7 downto 0);
+	signal cia2_pbd: unsigned(7 downto 0);
 
 	signal debugWE: std_logic := '0';
 	signal debugData: unsigned(7 downto 0) := (others => '0');
@@ -192,33 +219,35 @@
 	signal traceKey : std_logic;
 	signal trace2Key : std_logic;
 
--- video
-signal cyclesPerLine : unsigned(11 downto 0);
-signal scanConverterFaster : std_logic;
-
-signal vicColorIndex : unsigned(3 downto 0);
-signal vicHSync : std_logic;
-signal vicVSync : std_logic;
-
-signal vgaColorIndex : unsigned(3 downto 0);
-signal vgaR : unsigned(7 downto 0);
-signal vgaG : unsigned(7 downto 0);
-signal vgaB : unsigned(7 downto 0);
-signal vgaVSync : std_logic;
-signal vgaHSync : std_logic;
-signal vgaDebug : std_logic;
-signal vgaDebugDim : std_logic;
-signal debuggerOn : std_logic;	
-signal traceStep : std_logic;
-
--- config
-signal videoKey : std_logic;
-signal ntscMode : std_logic;
-
-signal videoConfigVideo : std_logic;
-signal videoConfigDim : std_logic;
-signal videoConfigShow : std_logic;
-signal videoConfigTimeout : unsigned(19 downto 0);
+	-- video
+	signal cyclesPerLine : unsigned(11 downto 0);
+	signal scanConverterFaster : std_logic;
+	signal ColorIndex : unsigned(3 downto 0);
+	
+	signal vicColorIndex : unsigned(3 downto 0);
+	signal vicHSync : std_logic;
+	signal vicVSync : std_logic;
+
+	signal vgaColorIndex : unsigned(3 downto 0);
+	signal vgaR : unsigned(7 downto 0);
+	signal vgaG : unsigned(7 downto 0);
+	signal vgaB : unsigned(7 downto 0);
+	signal vgaVSync : std_logic;
+	signal vgaHSync : std_logic;
+	signal vgaDebug : std_logic;
+	signal vgaDebugDim : std_logic;
+	signal debuggerOn : std_logic;
+	signal traceStep : std_logic;
+
+	-- config
+	signal videoKey : std_logic;
+	signal ntscMode : std_logic;
+	signal ntscModeInvert : std_logic := '0' ;
+
+	signal videoConfigVideo : std_logic;
+	signal videoConfigDim : std_logic;
+	signal videoConfigShow : std_logic;
+	signal videoConfigTimeout : unsigned(19 downto 0);
 	
 begin
 -- -----------------------------------------------------------------------
@@ -371,15 +400,17 @@
 			vsync_in => vicVSync,
 			video_out => vgaColorIndex,
 			hsync_out => vgaHSync,
-			vsync_out => vgaVSync			
+			vsync_out => vgaVSync
 		);
 	
 	cyclesPerLine <= to_unsigned(1080, 12) when ntscMode = '0' else to_unsigned(1088,12);
 	scanConverterFaster <= not ntscMode;
 	
+	ColorIndex <= vicColorIndex when tv15Khz_mode = '1' else vgaColorIndex;
+
 	c64colors: entity work.fpga64_rgbcolor
 		port map (
-			index => vgaColorIndex,
+			index => ColorIndex,
 			r => vgaR,
 			g => vgaG,
 			b => vgaB
@@ -404,8 +435,9 @@
 --			end if;				
 		end if;
 	end process;
-	hSync <= vgaHSync;
-	vSync <= vgaVSync;
+
+	hSync <= not vicHSync when tv15Khz_mode = '1' else vgaHSync;
+	vSync <= not vicVSync when tv15Khz_mode = '1' else vgaVSync;
 
 -- -----------------------------------------------------------------------
 -- Color RAM
@@ -431,7 +463,6 @@
 		end if;
 	end process;
 
-
 -- -----------------------------------------------------------------------
 -- PLA and bus-switches
 -- -----------------------------------------------------------------------
@@ -453,14 +484,14 @@
 			cpuData => cpuDo,
 			vicAddr => vicAddr,
 			vicData => vicData,
---			sidData => sidData,
+			sidData => unsigned(sid_do),
 			colorData => colorData,
 			cia1Data => cia1Do,
 			cia2Data => cia2Do,
 			lastVicData => lastVicDi,
 
 			systemWe => systemWe,
-			systemAddr(16 downto 0) => systemAddr,
+			systemAddr => systemAddr,
 			dataToCpu => cpuDi,
 			dataToVic => vicDi,
 
@@ -560,6 +591,29 @@
 	end process;
 
 -- -----------------------------------------------------------------------
+-- SID
+-- -----------------------------------------------------------------------
+	sid_we <= pulseWrRam and phi0_cpu;
+
+	sid : entity work.sid6581
+		port map (
+			clk32 => clk32,
+			clk_DAC => clk32,
+			reset => reset,
+
+			cs => cs_sid,
+			we => sid_we,
+			addr => cpuAddr(4 downto 0),
+			di => std_logic_vector(cpuDo),
+			do => sid_do,
+
+			pot_x => open,
+			pot_y => open,
+			audio_out => open,
+			audio_data => audio_data
+		);
+
+-- -----------------------------------------------------------------------
 -- CIAs
 -- -----------------------------------------------------------------------
 	cia1: entity work.cia6526
@@ -670,7 +724,10 @@
 			videoKey => videoKey,
 			traceKey => traceKey,
 			trace2Key => trace2Key,
-
+			
+			disk_num => disk_num,
+			dbg_num => dbg_num,
+			
 			backwardsReadingEnabled => '0'
 		);
 
@@ -696,11 +753,12 @@
 	end process;
 	
 	-- Video modes
+ntscMode <= ntscInitMode xor ntscModeInvert;
 	process(clk32)
 	begin
 		if rising_edge(clk32) then
 			if videoKey = '1' then
-				ntscMode <= not ntscMode;
+				ntscModeInvert <= not ntscModeInvert;
 			end if;
 		end if;
 	end process;
@@ -765,8 +823,11 @@
 --			end if;
 		elsif sysCycle >= CYCLE_IEC0 and sysCycle <= CYCLE_IEC3 then --IEC write
 			ramdata(5)<= cia2_pao(5);
+			iec_data_o <= cia2_pao(5);
 			ramdata(4)<= cia2_pao(4);
+			iec_clk_o <= cia2_pao(4);
 			ramdata(3)<= cia2_pao(3);
+			iec_atn_o <= cia2_pao(3);
 			ramdata(2)<= '0';   --lptstrobe
 		end if;
 
@@ -786,7 +847,7 @@
 		if rising_edge(clk32) then
 			if sysCycle = CYCLE_CPUD
 			or sysCycle = CYCLE_VIC2 then
-				ramDataReg <= ramData;
+				ramDataReg <= unsigned(ramData);
 			end if;
 		end if;
 	end process;
@@ -822,12 +883,14 @@
 		end if;
 		if rising_edge(clk32) then
 			if sysCycle = CYCLE_IEC1 then
-				cia2_pai(7) <= ramdata(7);
-				cia2_pai(6) <= ramdata(6);
+				cia2_pai(7) <= iec_data_i;
+				cia2_pai(6) <= iec_clk_i;
+
+
 			end if;	
 		end if;
 	end process;
-		
+
 --	debugBasicScreen: process(systemWe, cpuHasBus, systemData, systemAddr)
 --	begin
 --		if (pulseWrRam = '1') and (cpuHasBus = '1') and (systemAddr(15 downto 11)="00000") then
@@ -838,7 +901,7 @@
 --		debugAddr <= to_integer(systemAddr(10 downto 0));
 --		debugData <= systemData;
 --	end process;
-	
+
 	process(clk32)
 	begin
 		if rising_edge(clk32) then
@@ -847,7 +910,7 @@
 			end if;
 		end if;
 	end process;
-	
+
 	process(clk32)
 	begin
 		if rising_edge(clk32) then
@@ -902,4 +965,3 @@
 -- -----------------------------------------------------------------------
 	still <= X"4000";
 end architecture;
-
--- rtl_renommes\fpga64_keyboard_matrix_mark_mcdougall.vhd	2008-08-29 17:35:30.000000000 +0200
+++ rtl_dar\fpga64_keyboard_matrix_mark_mcdougall.vhd	2015-05-05 18:22:09.630034000 +0200
@@ -50,7 +50,9 @@
 		videoKey : out std_logic;
 		traceKey : out std_logic;
 		trace2Key : out std_logic;
-
+	  disk_num : out std_logic_vector(7 downto 0);
+	  dbg_num : out std_logic_vector(2 downto 0);
+		
 		-- Config
 		-- backwardsReadingEnabled = 1 allows reversal of PIA registers to still work.
 		-- not needed for kernel/normal operation only for some specific programs.
@@ -144,8 +146,37 @@
 	signal joyB_s : unsigned(joyB'range);						-- active low
 	signal joySel : std_logic_vector(1 downto 0) := "00";
 	
+	-- for disk image selection
+	signal diskChgKey : std_logic;
+	signal disk_nb : std_logic_vector(7 downto 0);
+	-- for debug display selection
+	signal dbgChgKey : std_logic;
+	signal dbg_nb : std_logic_vector(2 downto 0);
+	
 begin
 
+	process (clk)
+	begin
+		if rising_edge(clk) then
+			if diskChgKey = '1' then
+				if key_shiftl = '1' then
+				  disk_nb <= disk_nb - 1;
+				else
+				  disk_nb <= disk_nb + 1;					
+				end if;
+			end if;
+			if dbgChgKey = '1' then
+				if key_shiftl = '1' then
+				  dbg_nb <= dbg_nb - 1;
+				else
+				  dbg_nb <= dbg_nb + 1;					
+				end if;
+			end if;
+		end if;
+	end process;
+
+	disk_num <= disk_nb;
+	dbg_num <= dbg_nb;
 	--
 	-- cycle though joystick emulation options on <F11>	
 	--
@@ -337,6 +368,8 @@
 			trace2Key <= '0';
 			videoKey <= '0';
 			joySelKey <= '0';
+			diskChgKey <= '0';
+			dbgChgKey <= '0';
 			if newScanCode = '1' then
 				if theScanCode=X"F0" then
 					releaseFlag <= '1';		
@@ -359,11 +392,18 @@
 							videoKey <= '1';
 						end if;
 					when X"09" => key_plus <= not releaseFlag;
+					when X"0A" => -- F8
+						if releaseFlag = '0' then
+							diskChgKey <= '1';
+						end if;
 					when X"0B" => -- F6
 						if releaseFlag = '0' then
 							trace2Key <= '1';
 						end if;
-					-- 0C  F4
+					when X"0C" => -- F4
+						if releaseFlag = '0' then
+							dbgChgKey <= '1';
+						end if;
 					when X"83" => key_F7 <= not releaseFlag;
 	--				when X"0D" => key_runstop <= not releaseFlag;
 					when X"0E" => key_arrowleft <= not releaseFlag;
--- rtl_renommes\video_vicII_656x_a.vhd	2008-07-24 02:38:10.000000000 +0200
+++ rtl_dar\video_vicII_656x_a.vhd	2014-03-08 14:05:11.676512900 +0100
@@ -12,6 +12,8 @@
 -- VIC-II - Video Interface Chip no 2
 --
 -- -----------------------------------------------------------------------
+-- Dar 08/03/2014 : shift hsync to sprite #3
+-- -----------------------------------------------------------------------
 
 library IEEE;
 use IEEE.STD_LOGIC_1164.ALL;
@@ -769,7 +771,7 @@
 			if vicCycle = cycleRefresh1 then
 				hBlack <= '0';
 			end if;
-			if sprite = 5 then
+			if sprite = 3 then -- dar 5 then
 				hBlanking <= '1';
 			else
 				hBlanking <= '0';
